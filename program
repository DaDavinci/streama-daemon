#!/bin/bash
# Author: doOnline - D. van Dooijeweert
# Version: 1.0.1
# Website: https://www.doonline.nl
# Dependencies: (Are installed by the installer.sh)
# - Java-jdk-8
# - Wget
# - Streama

# Script Variables
_AUTH='doOnline';
_VERS='1.0.1';
_DESC='Program handler, current version '"$_VERS"' maintained by '"$_AUTH"'.';

# Configuration Variables
_DEBUG=1;

# Static variables
_LIB_NAME="streama";
_BIN_DIR="/usr/local/bin";
_LIB_DIR="/usr/local/lib/$_LIB_NAME";

_DAEMON_ACTIVE=0;
_DAEMON_START="$_LIB_DIR/bin/start-daemon";
_DAEMON_STOP="$_LIB_DIR/bin/stop-daemon";
_DAEMON_LOG="$_LIB_DIR/bin/log-daemon";
_DAEMON_VAR="$_LIB_DIR/etc/daemon.var";
_DAEMON_VARS="0:300:10";
_DAEMON_PID=$( tail -f "$_LIB_DIR/etc/daemon.pid" );

_STREAMA_ACTIVE=0;
_STREAMA_START="$_LIB_DIR/bin/start-streama";
_STREAMA_STOP="$_LIB_DIR/bin/stop-streama";
_STREAMA_LOG="$_LIB_DIR/bin/log-streama";
_STREAMA_PID=$( tail -f "$_LIB_DIR/etc/streama.pid" );

# Functions
function _HELP()
{
printf "
[streama] program usage guide for controlling streama and its daemon,

Usage:
	streama	[ command ]		[ argument ]
		{ start | stop | log }	{ daemon | streama }

Commands:
	start	start's streama and its daemon simultaniously
		where the deamon controlles streama's execution
		and logs his logs apart from streama's process.
		if an argument is given only either one will
		start, if the daemon is started while streama is
		not, the daemon will try to start streama by it-
		self.
	stop	stop's streama and its daemon after one another
		to make sure streama is closed down and then
		the daemon will be able to shut down as well
		after doing some clean-up of configurations and
		stored data about both their processes. if an
		argument is given, it will only stop either one
		of the processes, if streama is shut down while
		the deamon is not. the daemon might try to restart
		streama after some time or will notice it and shut
		down itself.
	log	display's stored logged data from either process
		in real-time on the terminal while not
		interrupting anything.
		!!! log REQUIRES an argument !!! to know which
		process it should display to the user. if no
		argument is given it will try to display streama's
		logged data.
	
If no command is given, the standard procedure is executed
and will try to debug whats going on in the background,
if anything noticable is seen by this procedure, the user
will be prompted to take action.
" && return 0;
}

function _MAIN()
{
	# Handle program command.
	local _COMMAND=$1;
	local _ARG=$2;
	
	if [ -z "$_COMMAND" ]; then
		case "$_COMMAND" in
		  '--help' | '-h' | 'help' | *)
		    $( _HELP ) && return $?;
		    ;;
		  '--stop' | '--end' | '-e' | 'stop' | 'end')
		    $( _STOP "$_ARG" ) && return $?;
		    ;;
		  '--start' | '--run' | '-r' | 'start' | 'run')
		    $( _START "$_ARG" ) && return $?;
		    ;;
		  '--log' | '--debug' | '-l' | '-d' | 'log' | 'debug')
		    $( _LOG "$_ARG" ) && return $?;
		    ;;
		esac
	fi
	
	# Check if streama or its daemon is not already running.
	[ -z "$_DAEMON_PID" ] && [ ps -p "$_DAEMON_PID" ] && _DAEMON_ACTIVE=1 && echo -e "[streama] Streama's daemon seems to be running, should we stop it? [y/n]" && read _STOP_DAEMON;
	[ -z "$_STREAMA_PID" ] && [ ps -p "$_STREAMA_PID" ] && [ "$_STOP_DAEMON" == "y" ] || [ "$_STOP_DAEMON" == "ye" ] || [ "$_STOP_DAEMON" == "yes" ] && _STREAMA_ACTIVE=1 && echo -e "[streama] Streama seems to be running, should we stop it? [y/n]" && read _STOP_STREAMA;
	
	# Read users input if they where asked to say if the process needed to be stopped.
	if [ -z "$_STOP_DAEMON" ]; then if [ "$_STOP_DAEMON" == "y" ] || [ "$_STOP_DAEMON" == "ye" ] || [ "$_STOP_DAEMON" == "yes" ]; then echo -e "[streama] Shutting down Streama's daemon..." && $( bash "$_LIB_DIR"/bin/daemon-stop ) && [ $? -eq 0 ] && echo -e "[streama] Successfully shut down Streama's daemon..."; fi echo -e "[streama] Not shutting down Streama's daemon...\n[streama] If you still want to stop Streama's daemon use 'streama stop daemon' or 'streama stop'."; fi
	
	if [ -z "$_STOP_STREAMA" ] || [ -z "$_STOP_DAEMON" ]; then if [ "$_STOP_STREAMA" == "y" ] || [ "$_STOP_STREAMA" == "ye" ] || [ "$_STOP_STREAMA" == "yes" ] || [ "$_STOP_DAEMON" == "y" ] || [ "$_STOP_DAEMON" == "ye" ] || [ "$_STOP_DAEMON" == "yes" ]; then echo -e "[streama] Shutting down Streama..." && $( bash "$_LIB_DIR"/bin/streama-stop ) && [ $? -eq 0 ] && echo -e "[streama] Successfully shut down Streama..."; fi echo -e "[streama] Not shutting down Streama...\n[streama] If you still want to stop Streama use 'streama stop streama' or 'streama stop'."; fi
	
	# Clean up saved pids and vars, also save previously logged data to backup files and empty the current ones.
	# Cleaning up should only be executed if both processes are being shut down. if only the daemon is being shut down let saved data from streama be as is.
	return 0;
}

# Execute program.
_MAIN $1 $2;

# Exit bash script.
exit $?;
